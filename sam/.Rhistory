plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km.protein5$cluster,
xlab = "Cereal Consumption", ylab = "Red Meat Consumption",
main = paste("Single K-Means Attempt #5\n WCV: ",
round(km.protein5$tot.withinss, 4)))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km.proteinsim$cluster,
xlab = "Cereal Consumption", ylab = "Red Meat Consumption",
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km.proteinsim$tot.withinss, 4)))
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, type = "n",
xlab = "Cereal Consumption", ylab = "Red Meat Consumption",
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km.proteinsim$tot.withinss, 4)))
points(km.proteinsim$centers[, 6], km.proteinsim$centers[, 1], pch = 16, col = "blue")
abline(h = 0, lty = 2)
abline(v = 0, lty = 2)
text(protein.scaled$Cereals, protein.scaled$RedMeat,
labels = rownames(protein.scaled),
col = km.proteinsim$cluster)
d = dist(protein.scaled)
library(flexclust)
fit.single = hclust(d, method = "single")
fit.complete = hclust(d, method = "complete")
fit.average = hclust(d, method = "average")
par(mfrow = c(1, 3))
plot(fit.single, hang = -1, main = "Dendrogram of Single Linkage")
plot(fit.complete, hang = -1, main = "Dendrogram of Complete Linkage")
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage")
#There seems to be a bit of chaining depicted in the single linkage solution
#In particular, there seem to be some clusters with few observation memberships;
#the first two cluster splits place single observations in their own clusters
#(Portugal and Spain). We might not want to move forward with the single
#linkage solution. On the other hand, the complete linkage solution seems to have
#a pretty good balance of cluster sizes at various heights of the dendrogram.
clusters.complete2 = cutree(fit.complete, k = 2)
clusters.complete2
table(clusters.complete2)
par(mfrow = c(1, 1))
plot(fit.complete, hang = -1, main = "Dendrogram of Complete Linkage\n2 Clusters")
rect.hclust(fit.complete, k = 2)
aggregate(protein.scaled, by = list(cluster = clusters.complete2), median)
#The 2-cluster solution of the complete linkage dendrogram creates a cluster that
#has 8 members and a cluster that has 17 members. The smaller cluster consists
#of countries Portugal, Spain, Greece, Italy, Albania, Bulgaria, Romania, and
#Yugoslavia. The median consumption of this cluster appears to be particularly
#low in white meat, eggs, milk, and starch; in contrast, the median consumption
#of this cluster appears to be particularly high in cereals, nuts, fruits, and
#vegetables. The larger cluster consists of the remaining countries; the median
#consumption of this cluster is in the opposite direction of the highlights
#listed for the smaller cluster.
clusters.complete5 = cutree(fit.complete, k = 5)
clusters.complete5
table(clusters.complete5)
par(mfrow = c(1, 1))
plot(fit.complete, hang = -1, main = "Dendrogram of Complete Linkage\n5 Clusters")
rect.hclust(fit.complete, k = 5)
aggregate(protein.scaled, by = list(cluster = clusters.complete5), median)
#The 5-cluster solution of the complete linkage dendrogram creates clusters that
#have between 2 and 8 members each. The smallest cluster consists of just Portugal
#and Spain and has a particualrly low median consumption of red meat, white meat,
#and milk, but particularly high median consumption of fish, starch, nuts, fruits,
#and vegetables. The second smallest cluster consists of Finland, Norway, Denmark,
#and Sweden. This cluster has the highest median consumption of milk, the second
#largest median consumption of fish, but particularly low consumption of nuts
#fruits, and vegetables. The next smallest cluster consists of Hungary, USSR,
#Poland, Czech., and East Germany. This cluster is particularly denoted by its
#high median consumption of white meat and starch. The largest cluster is home
#to the countries France, UK, Ireland, Belgium, West Germany, Switzerland,
#Austria, and the Netherlands. These countries have the particular characteristic
#of the highest median consumption of red meat and eggs. The second largest cluster
#contains Greece, Italy, Albania, Bulgaria, Romania, and Yugoslavia. This cluster
#is denoted by their lowest median consumption of eggs, fish, and starch, but
#the highest median consumption of cereals and nuts.
library(tidyverse)
edge_list <- tibble(from = c(1, 2, 2, 3, 4), to = c(2, 3, 4, 2, 1))
node_list <- tibble(id = 1:4)
library(tidyverse)
edge_list <- tibble(from = c(1, 2, 2, 3, 4), to = c(2, 3, 4, 2, 1))
node_list <- tibble(id = 1:4)
letters <- read_csv("data/correspondence-data-1585.csv")
setwd("~/Desktop/intro-to-r")
library(tidyverse)
letters <- read_csv("data/correspondence-data-1585.csv")
letters
sources = letters %>%
distinct(source) %>%
rename(label = source)
destinations = letters %>%
distinct(destination) %>%
rename(label = destination)
nodes = full_join(sources,destinations, by='label')
nodes = full_join(sources,destinations, by='label')
nodes
nodes = full_join(sources,destinations, by='label') %>% rowid_to_column("id")
nodes
per_route = letters %>%
group_by(source,destination) %>%
summarise(weight = n()) %>%
ungroup()
per_route
per_route = letters %>%
group_by(source,destination) %>%
summarise(weight = n())
per_route
per_route = letters %>%
group_by(source,destination) %>%
summarise(weight = n()) %>%
ungroup()
per_route
per_route = letters %>%
group_by(source,destination) %>%
summarise(weight = n())
per_route
per_route = letters %>%
group_by(source,destination) %>%
summarise(weight = n()) %>%
ungroup()
per_route
per_route = letters %>%
group_by(source,destination) %>%
mutate(weight = n()) %>%
ungroup()
per_route
per_route = letters %>%
group_by(source,destination) %>%
summarise(weight = n())
per_route
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("destination" = 'label')) %>%
rename(to=id)
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("destination" = 'label')) %>%
rename(to=id) %>% select(edges,from, to, weight)
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("destination" = 'label')) %>%
rename(to=id) %>% select(from, to, weight)
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("destination" = 'label')) %>%
rename(to=id) %>% select(from, to, weight)
edges
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("destination" = 'label')) %>%
rename(to=id) %>%
edges = select(edges,from, to, weight)
edges
per_route = letters %>%
group_by(source,destination) %>%
summarise(weight = n())
per_route
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("destination" = 'label')) %>%
rename(to=id) %>%
edges = select(edges,from, to, weight)
sources = letters %>%
distinct(source) %>%
rename(label = source)
destinations = letters %>%
distinct(destination) %>%
rename(label = destination)
edge = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = edge %>%
left_join(nodes, by = c("destination" = 'label')) %>%
rename(to=id) %>%
edges = select(edges,from, to, weight)
rm(list=ls())
library(tidyverse)
letters <- read_csv("data/correspondence-data-1585.csv")
letters
sources = letters %>%
distinct(source) %>%
rename(label = source)
destinations = letters %>%
distinct(destination) %>%
rename(label = destination)
nodes = full_join(sources,destinations, by='label') %>% rowid_to_column("id")
nodes
per_route = letters %>%
group_by(source,destination) %>%
summarise(weight = n())
per_route
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("destination" = 'label')) %>%
rename(to=id) %>%
edges = select(edges,from, to, weight)
edges
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("destination" = 'label')) %>%
rename(to = id)
edges = select(edges,from, to, weight)
edges
per_route = letters %>%
group_by(source,destination) %>%
summarise(weight = n()) %>%
ungroup()
per_route
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("destination" = 'label')) %>%
rename(to = id)
edges = select(edges,from, to, weight)
edges
install.packages("network")
library(network)
routes_network <- network(edges, vertex.attr = nodes,
matrix.type = "edgelist", ignore.eval = FALSE)
print(routes_network)
summary(routes_network)
plot(routes_network, vertex.cex = 3)
plot(routes_network, vertex.cex = 3)
plot(routes_network, vertex.cex = 3, mode = "circle")
detach(package:network)
rm(routes_network)
library(igraph)
routes_igraph <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
routes_igraph
print(routes_igraph)
summary(routes_igraph)
plot(routes_igraph, edge.arrow.size = 0.2)
plot(routes_igraph, edge.arrow.size = 0.2)
plot(routes_igraph, edge.arrow.size = 0.2)
plot(routes_igraph, layout = layout_with_graphopt, edge.arrow.size = 0.2)
library(tidygraph)
library(tidygraph)
install.packages("tidygraph")
library(tidygraph)
library(ggraph)
install.packages("ggraph")
library(tidygraph)
library(ggraph)
routes_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
routes_igraph_tidy <- as_tbl_graph(routes_igraph)
routes_tidy
routes_tidy %>%
activate(edges) %>%
arrange(desc(weight))
routes_tidy %>%
#activate(edges) %>%
arrange(desc(weight))
routes_tidy %>%
activate(edges) %>%
arrange(desc(weight))
ggraph(routes_tidy) + geom_edge_link() + geom_node_point() + theme_graph()
ggraph(routes_tidy) + geom_edge_link() + geom_node_point() #+ theme_graph()
ggraph(routes_tidy) + geom_edge_link() + geom_node_point() + theme_graph()
ggraph(routes_tidy, layout = 'graphopt') +
geom_edge_link(aes(width=weight), alpha=0.8) +
scale_edge_width(range=c(0.2,2)) +
geom_node_text(aes(label=label), repel=TRUE) +
labs(edge_width = "Letters") +
geom_node_point() +
theme_graph()
ggraph(routes_tidy, layout = 'graphopt') +
geom_node_point() +
geom_edge_link(aes(width=weight), alpha=0.8) +
scale_edge_width(range=c(0.2,2)) +
geom_node_text(aes(label=label), repel=TRUE) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_tidy, layout = 'graphopt') +
geom_node_point() +
geom_edge_link(aes(width=weight), alpha=0.8) +
scale_edge_width(range=c(0.2,2)) +
geom_node_text(aes(label=label), repel=TRUE) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_tidy, layout = 'graphopt') +
geom_node_point() +
geom_edge_link(aes(width=weight), alpha=0.8) +
scale_edge_width(range=c(0.2,2)) +
geom_node_text(aes(label=label), repel=TRUE) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_tidy, layout = 'graphopt') +
geom_node_point() +
geom_edge_link(aes(width=weight), alpha=0.8) +
scale_edge_width(range=c(0.2,2)) +
geom_node_text(aes(label=label), repel=TRUE) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_tidy, layout = 'graphopt') +
geom_node_point() +
geom_edge_link(aes(width=weight), alpha=0.8) +
scale_edge_width(range=c(0.5,2)) +
geom_node_text(aes(label=label), repel=TRUE) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_tidy, layout = 'graphopt') +
geom_node_point() +
geom_edge_link(aes(width=weight), alpha=0.8) +
scale_edge_width(range=c(0.1,2)) +
geom_node_text(aes(label=label), repel=TRUE) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_tidy, layout = 'graphopt') +
geom_node_point() +
geom_edge_link(aes(width=weight), alpha=0.8) +
scale_edge_width(range=c(0.1,2)) +
geom_node_text(aes(label=label), repel=TRUE) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_igraph, layout = "linear") +
geom_edge_arc(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label)) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_tidy, layout = 'graphopt') +
geom_node_point() +
geom_edge_link(aes(width=weight), alpha=0.8) +
scale_edge_width(range=c(0.1,2)) +
geom_node_text(aes(label=label), repel=TRUE) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_igraph, layout = "linear") +
geom_edge_arc(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label)) +
labs(edge_width = "Letters") +
theme_graph()
install.packages("visNetwork")
install.packages("networkD3")
library(visNetwork)
library(networkD3)
visNetwork(nodes,edges)
edges = mutate(edges, width = weight/5 + 1)
visNetwork(nodes,edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrow="middle")
edges = mutate(edges, width = weight/5 + 1)
visNetwork(nodes,edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows="middle")
nodes_d3 <- mutate(nodes, id = id - 1)
edges_d3 <- mutate(edges, from = from - 1, to = to - 1)
forceNetwork(Links = edges_d3, Nodes = nodes_d3, Source = "from", Target = "to",
NodeID = "label", Group = "id", Value = "weight",
opacity = 1, fontSize = 16, zoom = TRUE)
sankeyNetwork(Links = edges_d3, Nodes = nodes_d3, Source = "from", Target = "to",
NodeID = "label", Value = "weight", fontSize = 16, unit = "Letter(s)")
setwd("~/Desktop/HealthCareCapstone/sam")
medBene = read_csv('./data/medBene.csv')
medBene = read_csv('./data/medBene.csv')
medBene
sources = medBene %>%
distinct(AttendingPhysician) %>%
rename(label = source)
medBene
sources = medBene %>%
select(AttendingPhysician) %>%
unique() %>%
rename(label = source)
sources = medBene %>%
select('AttendingPhysician') %>%
unique() %>%
rename(label = source)
sources = medBene$AttendingPhysician %>%
unique() %>%
rename(label = AttendingPhysician)
sources = medBene %>%
distinct(AttendingPhysician) %>%
rename(label = AttendingPhysician)
destinations = medBene %>%
distinct(OperatingPhysician) %>%
rename(label = OperatingPhysician)
nodes = full_join(sources,destinations, by='label') %>% rowid_to_column("id")
nodes
sources = medBene %>%
distinct(AttendingPhysician) %>%
rename(label = AttendingPhysician)
destinations = medBene %>%
distinct(OperatingPhysician) %>%
rename(label = OperatingPhysician)
other = medBene %>%
distinct(OtherPhysician) %>%
rename(label = OtherPhysician)
nodes = full_join(sources,destinations, by='label') %>% rowid_to_column("id")
nodes = full_join(nodes,other, by='label') %>% rowid_to_column("id")
nodes = full_join(sources,destinations, by='label')
nodes = full_join(nodes,other, by='label') %>% rowid_to_column("id")
nodes
per_route = medBene %>%
group_by(AttendingPhysician,OperatingPhysician) %>%
summarise(weight = n()) %>%
ungroup()
per_route
edges = per_route %>%
left_join(nodes, by=c('AttendingPhysician' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("OperatingPhysician" = 'label')) %>%
rename(to = id)
edges = select(edges,from, to, weight)
edges = mutate(edges, width = weight/5 + 1)
visNetwork(nodes,edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows="middle")
sources = medBene %>%
distinct(AttendingPhysician) %>%
rename(label = AttendingPhysician)
destinations = medBene %>%
distinct(OperatingPhysician) %>%
rename(label = OperatingPhysician)
# other = medBene %>%
#   distinct(OtherPhysician) %>%
#   rename(label = OtherPhysician)
nodes = full_join(sources,destinations, by='label') %>% rowid_to_column("id")
# nodes = full_join(nodes,other, by='label') %>% rowid_to_column("id")
nodes
per_route = medBene %>%
group_by(AttendingPhysician,OperatingPhysician) %>%
summarise(weight = n()) %>%
ungroup()
per_route
edges = per_route %>%
left_join(nodes, by=c('AttendingPhysician' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("OperatingPhysician" = 'label')) %>%
rename(to = id)
edges = select(edges,from, to, weight)
edge = mutate(edges, width = weight + 1) %>% filter(weight > 5)
visNetwork(nodes,edge) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows="middle")
edges = mutate(edges, width = weight/5 + 1)
visNetwork(nodes,edges) %>%
#visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows="middle")
rm(list=ls())
library(visNetwork)
library(geomnet)
install.packages("geomnet")
library(igraph)
library(tidyverse)
letters <- read_csv("data/correspondence-data-1585.csv")
library(tidyverse)
letters <- read_csv("./data/correspondence-data-1585.csv")
letters
sources = letters %>%
distinct(source) %>%
rename(label = source)
destinations = letters %>%
distinct(destination) %>%
rename(label = destination)
nodes = full_join(sources,destinations, by='label') %>% rowid_to_column("id")
nodes
per_route = letters %>%
group_by(source,destination) %>%
summarise(weight = n()) %>%
ungroup()
per_route
edges = per_route %>%
left_join(nodes, by=c('source' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("destination" = 'label')) %>%
rename(to = id)
edges = select(edges,from, to, weight)
shiny::runApp('fraudNetwork')
View(letters)
save(nodes, file = "nodes.RData")
save(edges, file = "edges.RData")
runApp('fraudNetwork')
runApp('fraudNetwork')
library(tidyverse)
medicare = read_csv('./data/medicare.csv')
medicare
sources = medicare %>%
distinct(AttendingPhysician) %>%
rename(label = AttendingPhysician)
destinations = medicare %>%
distinct(OperatingPhysician) %>%
rename(label = OperatingPhysician)
nodes = full_join(sources,destinations, by='label') %>% rowid_to_column("id")
nodes
nodes = full_join(sources,destinations, by='label') %>% rowid_to_column("id") %>% drop_na()
nodes
